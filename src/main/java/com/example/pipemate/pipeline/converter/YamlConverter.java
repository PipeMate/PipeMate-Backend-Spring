package com.example.pipemate.pipeline.converter;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;

import java.io.StringWriter;
import java.util.Map;

@Component
@Slf4j
public class YamlConverter {

    /**
     * JSON Map을 YAML 문자열로 변환
     * @param jsonData JSON 데이터
     * @return YAML 문자열
     */
    public String convertJsonToYaml(Map<String, Object> jsonData) {
        try {
            log.info("Starting YAML conversion");

            // SnakeYAML 설정
            DumperOptions options = new DumperOptions();
            options.setPrettyFlow(true);                                    // 보기 좋은 출력
            options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);     // 블록 형식 YAML
            options.setDefaultScalarStyle(DumperOptions.ScalarStyle.PLAIN); // 스칼라 스타일
            options.setLineBreak(DumperOptions.LineBreak.UNIX);             // \n 줄바꿈
            options.setIndent(2);                                           // 2칸 들여쓰기
            options.setIndicatorIndent(2);                                  // 인디케이터 들여쓰기

            // YAML로 변환
            Yaml yaml = new Yaml(options);
            StringWriter writer = new StringWriter();
            yaml.dump(jsonData, writer);

            String yamlContent = writer.toString();

            log.info("YAML conversion completed successfully");
            log.debug("Generated YAML:\n{}", yamlContent);

            return yamlContent;

        } catch (Exception e) {
            log.error("Error during YAML conversion", e);
            throw new RuntimeException("Failed to convert to YAML: " + e.getMessage(), e);
        }
    }

    /**
     * YAML 파일 헤더 추가 (선택사항)
     * @param yamlContent 원본 YAML 내용
     * @param workflowName 워크플로우 이름
     * @return 헤더가 추가된 YAML 내용
     */
    public String addYamlHeader(String yamlContent, String workflowName) {
        StringBuilder header = new StringBuilder();
        header.append("# This workflow was automatically generated by PipeMate\n");
        header.append("# Workflow name: ").append(workflowName).append("\n");
        header.append("# Generated at: ").append(java.time.LocalDateTime.now()).append("\n\n");

        return header.toString() + yamlContent;
    }
}