package com.example.pipemate.pipeline.converter;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Component
@Slf4j
public class YamlConverter {

    /**
     * JSON Map을 YAML 문자열로 변환
     *
     * @param jsonData JSON 데이터
     * @return YAML 문자열
     */
    public String convertJsonToYaml(Map<String, Object> jsonData) {
        try {
            log.info("Starting YAML conversion");

            // SnakeYAML 설정
            DumperOptions options = new DumperOptions();
            options.setPrettyFlow(true);                                    // 보기 좋은 출력
            options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);     // 블록 형식 YAML
            options.setDefaultScalarStyle(DumperOptions.ScalarStyle.PLAIN); // 스칼라 스타일
            options.setLineBreak(DumperOptions.LineBreak.UNIX);             // \n 줄바꿈
            options.setIndent(2);                                           // 2칸 들여쓰기
            options.setIndicatorIndent(1);                                  // 인디케이터 들여쓰기

            // SnakeYAML 인스턴스 생성
            Yaml yaml = new Yaml(new PrettyRepresenter(options), options);
            StringWriter writer = new StringWriter();

            // 순서 보장을 위해 LinkedHashMap으로 재귀 정렬
            Map<String, Object> ordered = orderKeysRecursively(jsonData);

            // YAML로 출력
            yaml.dump(ordered, writer);

            String yamlContent = writer.toString();
            log.info("YAML conversion completed successfully");
            log.debug("Generated YAML:\n{}", yamlContent);
            return yamlContent;

        } catch (Exception e) {
            log.error("Error during YAML conversion", e);
            throw new RuntimeException("Failed to convert to YAML: " + e.getMessage(), e);
        }
    }

    @SuppressWarnings("unchecked")
    private Map<String, Object> orderKeysRecursively(Map<String, Object> original) {
        Map<String, Object> result = new LinkedHashMap<>();
        for (Map.Entry<String, Object> entry : original.entrySet()) {
            Object value = entry.getValue();
            if (value instanceof Map) {
                result.put(entry.getKey(), orderKeysRecursively((Map<String, Object>) value));
            } else if (value instanceof List) {
                List<Object> orderedList = new ArrayList<>();
                for (Object item : (List<?>) value) {
                    if (item instanceof Map) {
                        orderedList.add(orderKeysRecursively((Map<String, Object>) item));
                    } else {
                        orderedList.add(item);
                    }
                }
                result.put(entry.getKey(), orderedList);
            } else {
                result.put(entry.getKey(), value);
            }
        }
        return result;
    }


    /**
     * YAML 파일 헤더 추가 (선택사항)
     *
     * @param yamlContent  원본 YAML 내용
     * @param workflowName 워크플로우 이름
     * @return 헤더가 추가된 YAML 내용
     */
    public String addYamlHeader(String yamlContent, String workflowName) {
        String header = "# This workflow was automatically generated by PipeMate\n" +
                "# Workflow name: " + workflowName + "\n" +
                "# Generated at: " + java.time.LocalDateTime.now() + "\n\n";

        return header + yamlContent;
    }

    /**
     * YAML 문자열을 JSON Map으로 변환
     *
     * @param yamlContent YAML 문자열
     * @return JSON Map (key-value 구조)
     */
    public Map<String, Object> convertYamlToJson(String yamlContent) {
        try {
            log.info("Starting JSON conversion from YAML");

            Yaml yaml = new Yaml();
            Map<String, Object> jsonData = yaml.load(yamlContent);

            log.info("YAML to JSON conversion completed successfully");
            log.debug("Parsed JSON Map:\n{}", jsonData);

            return jsonData;

        } catch (Exception e) {
            log.error("Error during YAML to JSON conversion", e);
            throw new RuntimeException("Failed to convert YAML to JSON: " + e.getMessage(), e);
        }
    }
}